#!/usr/bin/env ruby
# typed: true
# frozen_string_literal: true

require 'fileutils'
require 'typhoeus'

## CONSTANT fields

# rpm-get version
$VERSION = '0.0.1'
# Cache directory
$CACHE_DIR = '/var/cache/get-rpm'
# etc directory
$ETC_DIR = '/etc/rpm-get'
# CPU architecture
$HOST_CPU = retrieve_cpu
# user-agent
$USER_AGENT = "Mozilla/5.0 (X11; Linux #{$HOST_CPU}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
# For GitHub API
$RPMGET_TOKEN = ENV['RPMGET_TOKEN']
## CONSTANT fields

## Regular fields

# Stores either the sudo or doas command.
$elevate = ''
# Stores the command used
$action = ARGV[0]
# Stores the app the user requests
$app = ''
# Stores options passed to the script
$options = ['']
# Stores the type of package request
$type = ''
# Set a GitHub auth token in RPMGET_TOKEN to get bigger rate limit
$header_auth = ENV.include?('RPMGET_TOKEN') && "Authorization: token #{ENV['RPMGET_TOKEN']}"
# $header_param = ''
## Regular fields

# Define the user agent for Typhoeus
Typhoeus::Config.user_agent = $USER_AGENT

# TODO: comeback to the below method later.

# Parses arguments passed to the
# ruby script from the command line.
def parse_cli_args
  # ARGV.each do |arg|
  #   #
  # end

  # TODO: Add more cases for this switch (case) statement
  #
  # rubocop:disable Style/MethodCallWithoutArgsParentheses
  case $action
  when 'version'
    retrieve_version()
  when 'help', ''
    usage()
  when 'install'
    # TODO: add an install related method here.
  end
  # rubocop:enable Style/MethodCallWithoutArgsParentheses
end

# Called whenever rpm-get is called without arguments.
# @return [String]
def usage
  <<~HELP

Usage

rpm-get {update [--repos-only] [--quiet] | upgrade [--dg-only] | show <pkg list> | install <pkg list>
        | reinstall <pkg list> | remove [--remove-repo] <pkg list>
        | search [--include-unsupported] <regex> | cache | clean
        | list [--include-unsupported] [--raw|--installed|--not-installed]
        | prettylist [<repo>] | csvlist [<repo>] | fix-installed [--old-apps]
        | help | version}

rpm-get provides a high-level commandline interface for the package management
system to easily install and update packages published in 3rd party rpm
repositories or via direct download.

update
    update is used to resynchronize the package index files from their sources.
    When --repos-only is provided, only initialize and update rpm-get's
    external repositories, without updating rpm or looking for updates of
    installed packages.
    When --quiet is provided the fetching of rpm-get repository updates is done without progress feedback.

upgrade
    upgrade is used to install the newest versions of all packages currently
    installed on the system.
    When --dg-only is provided, only the packages which have been installed by rpm-get will be upgraded.

install
    install is followed by-repo is provided, also remove the rpm repository
    of rpm/ppa packages.

clean
    clean clears out the local repository (/var/cache/rpm-get) of retrieved
    package files.

search
    search for the given regex(7) term(s) from the list of available packages
    supported by rpm-get and display matches. When --include-unsupported is
    provided, include packages with unsupported architecture or upstream
    codename and include PPAs for Debian-derived distributions.

show
    show information about the given package (or a space-separated list of
    packages) including their install source and update mechanism.

list
    list the packages available via rpm-get. When no option is provided, list
    all supported packages and tell which ones are installed (slower). When
    --include-unsupported is provided, include packages with unsupported
    architecture or upstream codename and include PPAs for Debian-derived
    distributions (faster). When --raw is provided, list all packages and do
    not tell which ones are installed (faster). When --installed is provided,
    only list the packages installed (faster). When --not-installed is provided,
    only list the packages not installed (faster).

prettylist
    markdown formatted list the packages available in repo. repo defaults to
    01-main. If repo is 00-builtin or 01-main the packages from 00-builtin are
    included. Use this to update README.md.

csvlist
    csv formatted list the packages available in repo. repo defaults to
    01-main. If repo is 00-builtin or 01-main the packages from 00-builtin are
    included. Use this with 3rd party wrappers.

cache
    list the contents of the rpm-get cache (/var/cache/rpm-get).

fix-installed
    fix installed packages whose definitions were changed. When --old-apps is
    provided, transition packages to new format. This command is only intended
    for internal use.

help
    show this help.

version
    show rpm-get version.

  HELP
end

# Called whenever rpm-get is called with the version option.
# @return [String]
def retrieve_version = puts "rpm-get version: #{version}"

# Gets the CPU architecture in [String] format
# @return [String]
def get_cpu
  if defined?(RUBY_PLATFORM)
    String(RUBY_PLATFORM).sub('-linux', '')
  elsif which('arch')
    `arch`.chomp
  elsif which('uname')
    `uname -m`.chomp
  end
end

# Determines if rpm-get is running as root
#  and checks if `sudo` or `doas` is available.
def elevate_privs
  if Process.euid.zero?
    $elevate = ''
  elsif which('sudo')
    $elevate = 'sudo'
  elsif which('doas')
    $elevate = 'doas'
  else
    puts "rpm-get requires `sudo` or `doas` for '#{$app}', neither were found."
  end
end

# Checks if a command is available
# @return [TrueClass, FalseClass]
def which(cmd)
  exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(File::PATH_SEPARATOR) : ['']
  ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
    exts.each do |ext|
      exe = File.join(path, "#{cmd}#{ext}")
      return true if File.executable?(exe) && !File.directory?(exe)
    end
  end
  false # Return false if not found
end

# Creates the cache dir.
def create_cache_dir
  # fake_cache_dir = '/var/cache/get-rpm'
  # if Dir.exist?(fake_cache_dir)
  #   puts "Found #{fake_cache_dir}"
  #   FileUtils.mv(fake_cache_dir, CACHE_DIR)
  # end
  Dir.mkdir(CACHE_DIR)
  File.chmod(755, CACHE_DIR)
end

# Creates the etc dir.
def create_etc_dir
  Dir.mkdir(ETC_DIR)
  File.chmod(755, ETC_DIR)
end

# Takes a url and cleans it of unnecessary data.
# @return [String]
def clean_url(url, trim_url: false)
  # Create a HEAD request with follow_location enabled
  request = Typhoeus::Request.new(
    url,
    method: :head,
    followlocation: true,
    maxredirs: 10
  )

  # Execute the request
  response = request.run

  # Get the effective URL (final URL after following redirects)
  final_url = response.effective_url

  # Will return the untrimmed url if
  # a value for `trim_url` is not passed.
  return final_url unless trim_url

  # Trim any .rpm* patterns to just .rpm
  final_url.sub(/\.rpm.*/, '.rpm')
end

# Gets the package releases from GitHub
def get_github_releases
  $type = 'github'
  cache_file = "#{$CACHE_DIR}/#{$app}.json"

  # Lets try to cache the github releases for 1 hour to prevent API rate limiting.
  # https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api

  if (($action == 'install' || $action == 'update') && !File.exist?(CACHE_FILE))
    printc "Updating #{cache_file}", 'info'
    # Add code for downloading the releases here
  end
end

# rubocop:disable Metrics/MethodLength
# Prints coloured text to the terminal
def printc(msg, msg_type)
  # Define colours here
  @RED = "\e[31m"
  @GREEN = "\e[32m"
  @YELLOW = "\e[33m"
  @BLUE = "\e[34m"
  @MAGENTA = "\e[35m"
  @GREY = "\e[37m"
  @RESET = "\e[0m"

  case msg_type
  when 'info'
    printf "  [#{@green}INFO#{@reset}]: #{msg}\n"
  when 'progress'
    printf "  [#{@blue}PROGRESS#{@reset}]: #{msg}\n"
  when 'warn'
    printf "  [#{@yellow}[WARNING]:#{@reset}]: #{msg}\n"
  when 'error'
    printf "  [#{@red}[ERROR]:#{@reset}]: #{msg}\n"
  when 'fatal'
    printf "  [#{@magenta}[FATAL]:#{@reset}]: #{msg}\n"
    exit 1
  else
    printf "  [#{@grey}[UNKNOWN]:#{@reset}]: #{msg}\n"
  end
end
# rubocop:enable Metrics/MethodLength
