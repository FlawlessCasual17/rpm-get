#!/usr/bin/env ruby
# typed: true
# frozen_string_literal: true

require 'fileutils'
require 'typhoeus'
require 'down'
require 'tty-progressbar'
require 'json'
require 'nokogiri'
require 'rest-client'

## CONSTANT fields

# rpm-get version
$VERSION = '0.0.1'
# Cache directory
$CACHE_DIR = File.join(Dir.home, '.cache/rpm-get')
# etc directory
$ETC_DIR = '/etc/rpm-get'
# CPU architecture
$HOST_CPU = get_cpu()
# user-agent
$USER_AGENT = "Mozilla/5.0 (X11; Linux #{$HOST_CPU}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
## CONSTANT fields

## Regular fields

# Stores either the sudo or doas command.
$elevate = ''
# Stores the command used
$action = ARGV[0]
# The creator of the app requested
$creator = ''
# The organization of the app requested (GitLab only)
$organization = ''
# The project id of the app requested (GitLab only)
$project_id = ''
# Stores the app the user requests
$app = ''
# Stores options passed to the script
$options = ['']
# Stores the type of package request
$type = ''
# Stores the progress bar
$progress_bar = nil
# progress bar format
$format = '[:bar] :percent TOTAL::total_byte :current/:total bytes ETA::eta :rate bytes/s'
# Set a GitHub auth token in GITHUB_TOKEN to avoid rate limit
$gh_header_auth = ENV.include?('GITHUB_TOKEN') && "Bearer #{ENV['GITHUB_TOKEN']}"
# Set a GitLab auth token in GITLAB_TOKEN to avoid rate limit
$gl_header_auth = ENV.include?('GITLAB_TOKEN') && ENV['GITLAB_TOKEN']
# $header_param = ''
## Regular fields

# Define the user agent for Typhoeus
Typhoeus::Config.user_agent = $USER_AGENT

# TODO: comeback to the below method later.

# Parses arguments passed to the
# ruby script from the command line.
def parse_cli_args
  # ARGV.each do |arg|
  #   #
  # end

  # TODO: Add more cases for this switch (case) statement
  case $action
  when 'version'
    puts "rpm-get version: #{$VERSION}"
  when 'help', ''
    puts usage
  when 'install', 'update'
    # TODO: add an install related method here
    get_releases()
  when 'search'
    # TODO: add a search related method here
    # search()
  end
end

# Called whenever rpm-get is called without arguments.
# @return [String]
def usage
  <<~HELP

rpm-get version #{$VERSION}


Usage

rpm-get {update [--repos-only] [--quiet] | upgrade [--dg-only] | show <pkg list> | install <pkg list>
        | reinstall <pkg list> | remove [--remove-repo] <pkg list>
        | search [--include-unsupported] <regex> | cache | clean
        | list [--include-unsupported] [--raw|--installed|--not-installed]
        | prettylist [<repo>] | csvlist [<repo>] | fix-installed [--old-apps]
        | help | version}

rpm-get provides a high-level commandline interface for the package management
system to easily install and update packages published in 3rd party rpm
repositories or via direct download.

update
    update is used to resynchronize the package index files from their sources.
    When --repos-only is provided, only initialize and update rpm-get's
    external repositories, without updating rpm or looking for updates of
    installed packages.
    When --quiet is provided the fetching of rpm-get repository updates is done without progress feedback.

upgrade
    upgrade is used to install the newest versions of all packages currently
    installed on the system.
    When --dg-only is provided, only the packages which have been installed by rpm-get will be upgraded.

install
    install is followed by-repo is provided, also remove the rpm repository
    of rpm/ppa packages.

clean
    clean clears out the local repository (/var/cache/rpm-get) of retrieved
    package files.

search
    search for the given regex(7) term(s) from the list of available packages
    supported by rpm-get and display matches. When --include-unsupported is
    provided, include packages with unsupported architecture or upstream
    codename and include PPAs for Debian-derived distributions.

show
    show information about the given package (or a space-separated list of
    packages) including their install source and update mechanism.

list
    list the packages available via rpm-get. When no option is provided, list
    all supported packages and tell which ones are installed (slower). When
    --include-unsupported is provided, include packages with unsupported
    architecture or upstream codename and include PPAs for Debian-derived
    distributions (faster). When --raw is provided, list all packages and do
    not tell which ones are installed (faster). When --installed is provided,
    only list the packages installed (faster). When --not-installed is provided,
    only list the packages not installed (faster).

prettylist
    markdown formatted list the packages available in repo. repo defaults to
    01-main. If repo is 00-builtin or 01-main the packages from 00-builtin are
    included. Use this to update README.md.

csvlist
    csv formatted list the packages available in repo. repo defaults to
    01-main. If repo is 00-builtin or 01-main the packages from 00-builtin are
    included. Use this with 3rd party wrappers.

cache
    list the contents of the rpm-get cache (/var/cache/rpm-get).

fix-installed
    fix installed packages whose definitions were changed. When --old-apps is
provided, transition packages to new format. This command is only intended
    for internal use.

help
    show this help.

version
    show rpm-get version.

  HELP
end

# Returns the CPU architecture of the system.
# @return [String]
def get_cpu
  if defined?(RUBY_PLATFORM)
    String(RUBY_PLATFORM).sub('-linux', '')
  elsif which('arch')
    # https://ruby-doc.org/3.4.1/String.html#method-i-chomp
    `arch`.chomp
  elsif which('uname')
    `uname -m`.chomp
  end
end

# Determines if rpm-get is running as root
#  and checks if `sudo` or `doas` is available.
def elevate_privs
  if Process.euid.zero?
    $elevate = ''
  elsif which('sudo')
    $elevate = 'sudo'
  elsif which('doas')
    $elevate = 'doas'
  else
    printc "rpm-get requires `sudo` or `doas` for the command '#{$action}', neither were found.", 'warn'
    exit 1
  end
end

# Checks if a command is available
# @param [String] cmd
# @return [Boolean]
def which(cmd)
  # Declares a new array based on PATHEXT or an empty array.
  exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(File::PATH_SEPARATOR) : ['']
  # Use a for loop to check each path in PATH
  # @param [String] path
  ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
    # Use a for loop to check each extension
    # @param [String] ext
    exts.each do |ext|
      # Join the path and command (along with the extension)
      exe = File.join(path, "#{cmd}#{ext}")
      # Return true if the command is found.
      return true if File.executable?(exe) && !File.directory?(exe)
    end
  end
  false # Return false if not found
end

# Creates the cache dir.
def create_cache_dir = FileUtils.mkdir_p($CACHE_DIR)

# Creates the etc dir.
def create_etc_dir = FileUtils.mkdir_p($ETC_DIR)

# Takes a URL and cleans it of unnecessary data.
# @param [String] url
# @param [Boolean] trim_url
# @return [String]
def clean_url(url, trim_url: false)
  # Create a HEAD request type.
  request = Typhoeus::Request.new(
    url,
    method: :head,
    followlocation: true,
    maxredirs: 10
  )

  # Execute the request
  response = request.run

  # Get the effective URL (final URL after following redirects)
  final_url = response.effective_url

  # Will return the untrimmed URL if
  # a value for `trim_url` is not passed.
  return final_url unless trim_url

  # Trim any .rpm* patterns to just .rpm
  final_url.sub(/\.rpm.*/, '.rpm')
end

# Gets the releases from either GitHub or GitLab
def get_releases
  c_file_path = "#{$CACHE_DIR}/#{$app}_cache.json"
  url = ''
  headers = {}
  feedback_msg = nil

  case $type
  when 'github'
    base_url = 'https://api.github.com/repos'
    url = "#{base_url}/#{$creator}/#{$app}/releases/latest"
    headers = {
      'User-Agent': $USER_AGENT,
      'Authorization': $gh_header_auth
    }
    feedback_msg = parse_json(c_file_path, ['message'])
  when 'gitlab'
    base_url = 'https://gitlab.com/api/v4/projects'
    url = "#{base_url}/#{$project_id}/releases/permalink/latest"
    headers = {
      'User-Agent': $USER_AGENT,
      'PRIVATE-TOKEN': $gl_header_auth
    }
    feedback_msg = File.read(c_file_path)
  end

  # Ensure cache directory exists
  create_cache_dir() unless Dir.exist?($CACHE_DIR)
  # If cache file exists, skip
  return if File.exist?(c_file_path)

  # Notify the user
  printc "Updating #{c_file_path}", 'info'
  printc "Downloading JSON cache of #{$app} to #{c_file_path}", 'progress'

  # Try downloading, or raise an error
  begin
    Down.download(
      url,
      destination: c_file_path,
      headers: headers,
      # @param [Integer] content_length
      content_length_proc: lambda do |content_length|
        # If `content_length` is null, change the format
        content_length.nil? &&
          $format = $format.sub('TOTAL::total_byte', '').sub('/:total', '')

        bar = TTY::ProgressBar.new($format, total: content_length, head: '>')
        bar.resize(50)
        $progress_bar = bar
      end,
      # @param [Float] progress
      progress_proc: lambda do |progress|
        raise TypeError if progress.nil?

        $progress_bar&.advance(progress - $progress_bar.current)
      end
    )

    printc 'Download complete!', 'progress', true
  rescue StandardError => e
    printc "Failed to update cache for #{$app}", 'error', true
    printc e.detailed_message, 'error'
  end

  # If the GitHub/GitLab API rate limit is exceeded, tell the user
  return unless rate_limited?(feedback_msg)

  printc 'API rate limit exceeded!', 'warn'
  printc "Deleting #{c_file_path}", 'info'
  FileUtils.remove_file(c_file_path)
end

# rubocop: disable Style/OptionalBooleanParameter

# Prints colored text to the terminal
# @param [String] msg
# @param [String] msg_type
# @param [Boolean] new_line
def printc(msg, msg_type, new_line = false)
  # Define colours here
  @RED = "\e[31m"
  @GREEN = "\e[32m"
  @YELLOW = "\e[33m"
  @BLUE = "\e[34m"
  @MAGENTA = "\e[35m"
  @GREY = "\e[37m"
  @RESET = "\e[0m"

  # Add a newline if `new_line` is true
  cr = new_line ? "\n" : ''

  case msg_type
  when 'info'
    printf "#{cr}  [#{@GREEN}INFO#{@RESET}]: #{msg}\n"
  when 'progress'
    printf "#{cr}  [#{@BLUE}PROGRESS#{@RESET}]: #{msg}\n"
  when 'warn'
    printf "#{cr}  [#{@YELLOW}WARNING#{@RESET}]: #{msg}\n"
  when 'error'
    printf "#{cr}  [#{@RED}ERROR#{@RESET}]: #{msg}\n"
  when 'fatal'
    printf "#{cr}  [#{@MAGENTA}FATAL#{@RESET}]: #{msg}\n"
    exit 1
  else
    printf "#{cr}  [#{@GREY}UNKNOWN#{@RESET}]: #{msg}\n"
  end
end
# rubocop: enable Style/OptionalBooleanParameter

# Retrieves JSON content from a file,
# then parses it into a Ruby object.
# @param [String] path
# @param [Array] json_path
# @return [String]
def parse_json(path, json_path)
  # Read file and parse JSON content
  data = JSON.parse(File.read(path))
  # Access the nested data using the dig method
  # Using "&." for safe navigation
  # dig is a real method. See https://docs.ruby-lang.org/en/3.0/dig_methods_rdoc.html
  # @param [Hash] acc
  # @param [Object] key
  json_path.reduce(data) { |acc, key| acc&.dig(key) }
end

# Tells if GitHub API rate limit is exceeded
# @param [String] feedback_msg
# @return [Boolean]
def rate_limited?(feedback_msg)
  feedback_msg.include?('API rate limit exceeded') || feedback_msg.include?('Retry later')
end

# TODO: Create a method for scrapping HTML content

# TODO:
# [ ] Add a method for downloading RPMs (or even files)
# [ ] Add a method for prompting the user with an app's EULA
# [ ] Add a method for installing RPMs
# [ ] Add a method for uninstalling RPMs
# [ ] Add a method for updating RPMs
# [ ] Add a method for adding Copr/Zypper repos
# [ ] Add a method for removing Copr/Zypper repos
# [ ] Add a method for validating RPMs
# [ ] Add a method for listing RPMs
# [ ] Add a method for listing repos
